###############################################################################
#       -----------------------------------------------------                 #
#       HUAWEI SOLAR DATA - Power, Energy and Economy Sensors                 #
#       -----------------------------------------------------                 #
#                                                                             #
# This is a package file with the sensors included in Huawei Solar by Johan71 #
###############################################################################
sensor:
  - platform: integration
    source: sensor.input_power_with_efficiency_loss
    name: solar_energy_riemann
    round: 3
    unit_prefix: k
    unit_time: h
    method: left

  - platform: template
    sensors:
      battery_charge_only:
        friendly_name: "Battery Charge Only"
        unit_of_measurement: "W"
        device_class: power
        value_template: "{{ max(0, states('sensor.battery_charge_discharge_power') | float(0)) }}"

      battery_discharge_only:
        friendly_name: "Battery Discharge Only"
        unit_of_measurement: "W"
        device_class: power
        value_template: "{{ -min(0, states('sensor.battery_charge_discharge_power') | float(0)) }}"

      input_power_with_efficiency_loss:
        friendly_name: "Input Power with Efficiency Loss"
        unique_id: "input_power_with_efficiency_loss"
        unit_of_measurement: "W"
        device_class: power
        value_template: >-
          {% set inverter_rating = 10000 %}
          {% set inpower = states('sensor.inverter_input_power')|float(0) %}
          {% if inpower < (inverter_rating*0.1) %}
            {{ inpower * 0.90 }}
          {% elif inpower < (inverter_rating*0.2) %}
            {{ inpower * 0.95 }}
          {% else %}
            {{ inpower * 0.98 }}
          {% endif %}

      energy_pv:
        friendly_name: "PV Energy"
        unique_id: "PV_Energy"
        device_class: energy
        unit_of_measurement: "kWh"
        value_template: >
          {{ (states('sensor.inverter_total_yield') | float(0)) - (states('sensor.battery_total_discharge') | float(0)) + (states('sensor.battery_total_charge') | float(0)) }}

      energy_pv_daily:
        friendly_name: "PV Energy Daily"
        unique_id: "PV_Energy_daily"
        device_class: energy
        unit_of_measurement: "kWh"
        value_template: >
          {{ (states('sensor.inverter_daily_yield') | float(0)) - (states('sensor.battery_day_discharge') | float(0)) + (states('sensor.battery_day_charge') | float(0)) }}

      house_consumption_power:
        friendly_name: "House Consumption - Power"
        unique_id: house_consumption_power
        unit_of_measurement: "W"
        availability_template: >
          {{ states('sensor.inverter_active_power') | is_number and states('sensor.power_meter_active_power') | is_number }}
        value_template: >
          {% set inverters_power = states('sensor.inverter_active_power') | float(default=0) %}
          {% set power_meter_power = states('sensor.power_meter_active_power') | float(default=0) %}
          {{ max(0, (inverters_power - power_meter_power)) }}

      grid_to_battery:
        unique_id: grid_to_battery
        device_class: power
        unit_of_measurement: "W"
        value_template: >
          {% set grid_import = max(0, -1 * (states('sensor.power_meter_active_power') | float(0))) %}
          {% set battery_charging = states('sensor.battery_charge_only') | float(0) %}
          {{ min(grid_import, battery_charging) | round(0) }}

      grid_to_house:
        unique_id: grid_to_house
        device_class: power
        unit_of_measurement: "W"
        value_template: >
          {% set grid_import = max(0, -1 * (states('sensor.power_meter_active_power') | float(0))) %}
          {% set grid_to_battery_power = states('sensor.grid_to_battery') | float(0) %}
          {{ max(0, grid_import - grid_to_battery_power) | round(0) }}

      solar_to_battery:
        unique_id: solar_to_battery
        device_class: power
        unit_of_measurement: "W"
        value_template: >
          {% set battery_charging = states('sensor.battery_charge_only') | float(0) %}
          {% set grid_to_battery_power = states('sensor.grid_to_battery') | float(0) %}
          {{ max(0, battery_charging - grid_to_battery_power) | round(0) }}

      solar_to_house:
        unique_id: solar_to_house
        device_class: power
        unit_of_measurement: "W"
        value_template: >
          {% set inverter_ac_output = max(0, states('sensor.inverter_active_power') | float(0)) %}
          {% set solar_to_battery_power = states('sensor.solar_to_battery') | float(0) %}
          {% set solar_to_grid_power = states('sensor.solar_to_grid') | float(0) %}
          {{ max(0, inverter_ac_output - solar_to_battery_power - solar_to_grid_power) | round(0) }}

      solar_power_consumed:
        friendly_name: "Solar Power Consumed"
        unique_id: "solar_power_consumed"
        unit_of_measurement: "W"
        value_template: >
          {{ (states('sensor.solar_to_house') | float(0) + states('sensor.battery_to_house') | float(0)) | round(0) }}
        availability_template: >
          {{ states('sensor.solar_to_house') | float(default=0) is not none and states('sensor.battery_to_house') | float(default=0) is not none }}

      solar_to_grid:
        unique_id: solar_to_grid
        device_class: power
        unit_of_measurement: "W"
        value_template: >
          {% set inverter_ac_output = max(0, states('sensor.inverter_active_power') | float(0)) %}
          {% set grid_export = max(0, states('sensor.power_meter_active_power') | float(0)) %}
          {{ min(inverter_ac_output, grid_export) | round(0) }}

      battery_to_grid:
        unique_id: battery_to_grid
        device_class: power
        unit_of_measurement: "W"
        value_template: >
          {% set grid_export = max(0, states('sensor.power_meter_active_power') | float(0)) %}
          {% set solar_to_grid_power = states('sensor.solar_to_grid') | float(0) %}
          {% set battery_discharge = states('sensor.battery_discharge_only') | float(0) %}
          {% set non_solar_export_total = max(0, grid_export - solar_to_grid_power) %}
          {{ min(battery_discharge, non_solar_export_total) | round(0) }}

      battery_to_house:
        unique_id: battery_to_house
        device_class: power
        unit_of_measurement: "W"
        value_template: >
          {% set battery_discharge = states('sensor.battery_discharge_only') | float(0) %}
          {% set battery_to_grid_power = states('sensor.battery_to_grid') | float(0) %}
          {{ max(0, battery_discharge - battery_to_grid_power) | round(0) }}

      battery_status:
        friendly_name: "Battery Status"
        value_template: >
          {% set charge_discharge_power = states('sensor.battery_charge_discharge_power') | float(default=0) %}
          {% if charge_discharge_power > 0.1 %}
            Charging
          {% elif charge_discharge_power < -0.1 %}
            Discharging
          {% else %}
            Idle
          {% endif %}

      house_power_from_grid_w:
        unique_id: house_power_from_grid_w
        friendly_name: "House Power Consumption from Grid"
        unit_of_measurement: "W"
        value_template: >
          {% set grid_import_power = states('sensor.power_meter_active_power') | float(0) %}
          {{ max(0, -grid_import_power) | round(0) }}

      house_power_from_solar_w:
        unique_id: house_power_from_solar_w
        friendly_name: "House Power Consumption from Solar (Raw PV Input)"
        unit_of_measurement: "W"
        value_template: >
          {% set inv_power = states('sensor.inverter_input_power') | float(0) %}
          {{ max(0, inv_power) | round(0) }}
          
################################################################################
#  END OF PACKAGE FILE
################################################################################
